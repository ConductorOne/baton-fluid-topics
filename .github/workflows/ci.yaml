name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.22.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    env:
      FLUID_TOPICS_BEARER_TOKEN: ${{ secrets.FLUID_TOPICS_BEARER_TOKEN }}
      FLUID_TOPICS_DOMAIN: ${{ secrets.FLUID_TOPICS_DOMAIN}}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      FLUID_TOPICS_BEARER_TOKEN: ${{ secrets.FLUID_TOPICS_BEARER_TOKEN}}
      FLUID_TOPICS_DOMAIN: ${{ secrets.FLUID_TOPICS_DOMAIN}}

      CONNECTOR_GRANT: ${{ vars.CONNECTOR_GRANT }}
      CONNECTOR_ENTITLEMENT: ${{ vars.CONNECTOR_ENTITLEMENT }}
      CONNECTOR_PRINCIPAL: ${{ vars.CONNECTOR_PRINCIPAL }}
      CONNECTOR_PRINCIPAL_TYPE: ${{ vars.CONNECTOR_PRINCIPAL_TYPE }}

    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build baton-fluid-topics
        run: go build ./cmd/baton-fluid-topics
      - name: Run baton-fluid-topics
        run: ./baton-fluid-topics --bearer-token=${{ env.FLUID_TOPICS_BEARER_TOKEN }} --domain=${{ env.FLUID_TOPICS_DOMAIN }}

      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin

      - name: Grant entitlement
        run:  ./baton-fluid-topics --bearer-token=${{env.FLUID_TOPICS_BEARER_TOKEN}} --domain=${{ env.FLUID_TOPICS_DOMAIN }} --grant-entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"

      - name: Re-sync the data from Fluid topics
        run:  ./baton-fluid-topics --bearer-token=${{env.FLUID_TOPICS_BEARER_TOKEN}} --domain=${{ env.FLUID_TOPICS_DOMAIN }}

      - name: Check grant was granted
        run:  baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status '.grants[].principal.id.resource == "${{ env.CONNECTOR_PRINCIPAL }}"' | grep true

      - name: Revoke grants
        run: ./baton-fluid-topics --bearer-token=${{env.FLUID_TOPICS_BEARER_TOKEN}} --domain=${{ env.FLUID_TOPICS_DOMAIN }} --revoke-grant="${{env.CONNECTOR_GRANT}}"

      - name: Re-sync the data from Freshdesk
        run: ./baton-fluid-topics --bearer-token=${{env.FLUID_TOPICS_BEARER_TOKEN}} --domain=${{ env.FLUID_TOPICS_DOMAIN }}

      - name: Check grant was revoked
        run: ./baton-fluid-topics --bearer-token=${{env.FLUID_TOPICS_BEARER_TOKEN}} --domain=${{ env.FLUID_TOPICS_DOMAIN }} && baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status 'if .grants then .grants[]?.principal.id.resource != "${{ env.CONNECTOR_PRINCIPAL }}" else . end'

